A guide to following the steps below
------------------------------------

The bullet numbers below are actions that you have to do. Each bullet
point refers to the implementation of one part of the project.

The '*'s are API call examples. You have to make sure that each of
them return successfully before proceeding to the next line.

If you see an 'X' just below an '*', then the 'X' refers to an
expected error. Make sure you run into the exact same error before
proceeding.

The '-'s are line or chunks of code that you'll have to add into your
project at that point.

The 'O's are expected outputs of the immediately preceeding API calls
marked with a '*'.

1. Implement the Cateogry model and define the /categories/ endpoint.

 * curl -H "Content-Type:application/json" -X POST -d '{"name":"Fruits"}' "http://localhost:8000/api/v1/categories/"
 * curl -H "Content-Type:application/json" -X DELETE "http://localhost:8000/api/v1/categories/2/"
 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/categories/"
 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/categories/1/"
 * curl -H "Content-Type:application/json" -X PATCH -d '{"name":"Vegetables"}' "http://localhost:8000/api/v1/categories/1/"

2. Breakup the SimpleRouter entry for /categories/ and implement it manually.

 - url(r'^categories/$', CategoryViewSet, name='category-list')
 - url(r'^categories/$', CategoryViewSet.as_view(), name='category-list')
 - url(r'^categories/$', CategoryViewSet.as_view({'get':'list'}), name='category-list')

 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/categories/"
 * curl -H "Content-Type:application/json" -X POST -d '{"name":"Fruits"}' "http://localhost:8000/api/v1/categories/"
 X {"detail":"Method \"POST\" not allowed."}

 - url(r'^categories/$', CategoryViewSet.as_view({'get':'list', 'post':'create'}), name='category-list')

 * curl -H "Content-Type:application/json" -X POST -d '{"name":"Fruits"}' "http://localhost:8000/api/v1/categories/"
 * curl -H "Content-Type:application/json" -X DELETE "http://localhost:8000/api/v1/categories/3/"
 X Page not found (404)

 - url(r'^categories/(?P<pk>[0-9]+)/$', CategoryViewSet.as_view({'delete':'destroy'}), name='category-detail')

 * curl -H "Content-Type:application/json" -X DELETE "http://localhost:8000/api/v1/categories/3/"
 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/categories/1/"
 X {"detail":"Method \"GET\" not allowed."}

 - url(r'^categories/(?P<pk>[0-9]+)/$', CategoryViewSet.as_view({'get':'retrieve', 'delete':'destroy'}), name='category-detail')

 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/categories/1/"
 * curl -H "Content-Type:application/json" -X PATCH -d '{"name":"Meat"}' "http://localhost:8000/api/v1/categories/1/"
 X {"detail":"Method \"PATCH\" not allowed."}

 - url(r'^categories/(?P<pk>[0-9]+)/$', CategoryViewSet.as_view({'get':'retrieve', 'delete':'destroy', 'patch':'partial_update'}), name='category-detail')

 * curl -H "Content-Type:application/json" -X PATCH -d '{"name":"Meat"}' "http://localhost:8000/api/v1/categories/1/"

3. Create a Stat model and a /stats/ endpoint (Use ReadOnlyModelViewSet).

 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/stats/"

4. Update Stat whenever a Category is created. (Override `def create()`)

 * curl -H "Content-Type:application/json" -X POST -d '{"name":"Crockery"}' "http://localhost:8000/api/v1/categories/"
 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/stats/"
 O [{"id":1,"category_count":3}]

5. Update Stat whenever a Cateogry is deleted. (Override `def destroy()`)

 * curl -H "Content-Type:application/json" -X DELETE "http://localhost:8000/api/v1/categories/5/"
 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/stats/"
 O [{"id":1,"category_count":2}]

6. Add a `status` field to the Category model.

 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/categories/"
 O [{"id":1,"name":"Meat","status":1},{"id":4,"name":"Crockery","status":1},{"id":5,"name":"Cosmetics","status":1}]
 * curl -H "Content-Type:application/json" -X PATCH -d '{"status":0}' "http://localhost:8000/api/v1/categories/5/"
 O {"id":5,"name":"Cosmetics","status":0}
 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/categories/"
 O [{"id":1,"name":"Meat","status":1},{"id":4,"name":"Crockery","status":1},{"id":5,"name":"Cosmetics","status":0}]

7. Only display categories with status 1. (Override `def get_queryset()`)

 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/categories/"
 O [{"id":1,"name":"Meat","status":1},{"id":4,"name":"Crockery","status":1}]

8. Create a Product model and a /products/ endpoint.
8.1. Add REST_FRAMEWORK = {'PAGE_SIZE':10} to settings. 

 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/categories/"
 O [{"id":1,"name":"Meat","status":1},{"id":4,"name":"Crockery","status":1}]
 * curl -H "Content-Type:application/json" -X POST -d '{"name":"Vessel", "category":4}' "http://localhost:8000/api/v1/products/"
 O {"id":1,"name":"Vessel","category":4}
 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/products/"
 O {"count":1,"next":null,"previous":null,"results":[{"id":1,"name":"Vessel","category":4}]}

9. Hmm. `Category:4` doesn't tell us much. Let's make it tell us more about category itself. Let's edit the ProductSerializer 
 - class ProductSerializer(serializers.ModelSerializer):
       category = CategorySerializer()
       class Meta:
           model = Product
 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/products/" | python -m json.tool
 O {
    "count": 1,
    "next": null,
    "previous": null,
    "results": [
        {
            "id": 1,
            "category": {
                "id": 4,
                "name": "Crockery",
                "status": 1
            },
            "name": "Vessel"
        }
    ]
   }
 * curl -H "Content-Type:application/json" -X POST -d '{"name":"Vessel", "category":4}' "http://localhost:8000/api/v1/products/"
 X {"category":{"non_field_errors":["Invalid data. Expected a dictionary, but got int."]}}

 * curl -H "Content-Type:application/json" -X POST -d '{"name":"Stove", "category":{"id":4,"name":"Crockery","status":1}}' "http://localhost:8000/api/v1/products/"
 X AssertionError: The `.create()` method does not support writable
   nested fields by default.  Write an explicit `.create()` method for
   serializer `products.serializers.ProductSerializer`, or set
   `read_only=True` on ne sted serializer fields.

10. Override the .create() method on the ProductSerializer. (We are
    not putting read_only=True because category is a required FK value for
    a product object to be created. You can try putting
    read_only=True. You will get a "IntegrityError: NOT NULL constraint
    failed" error)

 - def create(self, validated_data):
        category_data = validated_data.pop('category')
        category = Category.objects.get(**category_data)
        product = Product.objects.create(category=category, **validated_data)
        return product

 * curl -H "Content-Type:application/json" -X POST -d '{"name":"Stove", "category":{"id":4,"name":"Crockery","status":1}}' "http://localhost:8000/api/v1/products/"
 O {"id":3,"category":{"id":4,"name":"Crockery","status":1},"name":"Stove"}

11. It is cumbersome to keep sending the entire JSON of an FK object
    whenever you want a new object to be created. So let's se e how we can
    fix that. Let's edit ProductSerializer. (Remember to comment out the
    overridden .create() method as we no lon ger need that

 - class ProductSerializer(serializers.ModelSerializer):
       category_id = serializers.PrimaryKeyRelatedField(
            write_only=True,
	    queryset=Category.objects.all(),
            source='category'
       )
       category = CategorySerializer(read_only=True)

       class Meta:
            model = Product
            fields = ('id', 'name', 'category_id', 'category')
 * curl -H "Content-Type:application/json" -X POST -d '{"name":"Glass", "category_id":4}' "http://localhost:8000/api/v1/products/"
 O {"id":4,"name":"Glass","category":{"id":4,"name":"Crockery","status":1}}
 * curl -H "Content-Type:application/json" -X GET "http://localhost:8000/api/v1/products/"
 O {
    "count": 3,
    "next": null,
    "previous": null,
    "results": [
        {
            "id": 1,
            "name": "Vessel",
            "category": {
                "id": 4,
                "name": "Crockery",
                "status": 1
            }
        },
        {
            "id": 3,
            "name": "Stove",
            "category": {
                "id": 4,
                "name": "Crockery",
                "status": 1
            }
        },
        {
            "id": 4,
            "name": "Glass",
            "category": {
                "id": 4,
                "name": "Crockery",
                "status": 1
            }
        }
    ]
   }
